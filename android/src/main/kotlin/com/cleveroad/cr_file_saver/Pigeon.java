// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.cleveroad.cr_file_saver;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum DestinationDirectory {
    download(0),
    images(1),
    dcim(2),
    documents(3),
    music(4),
    movies(5),
    podcasts(6);

    private int index;
    private DestinationDirectory(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SaveFileDialogParams {
    private @NonNull String sourceFilePath;
    public @NonNull String getSourceFilePath() { return sourceFilePath; }
    public void setSourceFilePath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sourceFilePath\" is null.");
      }
      this.sourceFilePath = setterArg;
    }

    private @Nullable byte[] data;
    public @Nullable byte[] getData() { return data; }
    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    private @NonNull String destinationFileName;
    public @NonNull String getDestinationFileName() { return destinationFileName; }
    public void setDestinationFileName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"destinationFileName\" is null.");
      }
      this.destinationFileName = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SaveFileDialogParams() {}
    public static final class Builder {
      private @Nullable String sourceFilePath;
      public @NonNull Builder setSourceFilePath(@NonNull String setterArg) {
        this.sourceFilePath = setterArg;
        return this;
      }
      private @Nullable byte[] data;
      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }
      private @Nullable String destinationFileName;
      public @NonNull Builder setDestinationFileName(@NonNull String setterArg) {
        this.destinationFileName = setterArg;
        return this;
      }
      public @NonNull SaveFileDialogParams build() {
        SaveFileDialogParams pigeonReturn = new SaveFileDialogParams();
        pigeonReturn.setSourceFilePath(sourceFilePath);
        pigeonReturn.setData(data);
        pigeonReturn.setDestinationFileName(destinationFileName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sourceFilePath", sourceFilePath);
      toMapResult.put("data", data);
      toMapResult.put("destinationFileName", destinationFileName);
      return toMapResult;
    }
    static @NonNull SaveFileDialogParams fromMap(@NonNull Map<String, Object> map) {
      SaveFileDialogParams pigeonResult = new SaveFileDialogParams();
      Object sourceFilePath = map.get("sourceFilePath");
      pigeonResult.setSourceFilePath((String)sourceFilePath);
      Object data = map.get("data");
      pigeonResult.setData((byte[])data);
      Object destinationFileName = map.get("destinationFileName");
      pigeonResult.setDestinationFileName((String)destinationFileName);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class FileSaverApiCodec extends StandardMessageCodec {
    public static final FileSaverApiCodec INSTANCE = new FileSaverApiCodec();
    private FileSaverApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SaveFileDialogParams.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SaveFileDialogParams) {
        stream.write(128);
        writeValue(stream, ((SaveFileDialogParams) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FileSaverApi {
    void saveFile(@NonNull String filePath, @Nullable String destinationFileName, Result<String> result);
    void requestWriteExternalStoragePermission(Result<Boolean> result);
    void saveFileWithDialog(@NonNull SaveFileDialogParams params, Result<String> result);

    /** The codec used by FileSaverApi. */
    static MessageCodec<Object> getCodec() {
      return FileSaverApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FileSaverApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FileSaverApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FileSaverApi.saveFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filePathArg = (String)args.get(0);
              if (filePathArg == null) {
                throw new NullPointerException("filePathArg unexpectedly null.");
              }
              String destinationFileNameArg = (String)args.get(1);
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.saveFile(filePathArg, destinationFileNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FileSaverApi.requestWriteExternalStoragePermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestWriteExternalStoragePermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FileSaverApi.saveFileWithDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SaveFileDialogParams paramsArg = (SaveFileDialogParams)args.get(0);
              if (paramsArg == null) {
                throw new NullPointerException("paramsArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.saveFileWithDialog(paramsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
