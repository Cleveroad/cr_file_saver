// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface SaveFileDialogParams ()
+ (SaveFileDialogParams *)fromMap:(NSDictionary *)dict;
+ (nullable SaveFileDialogParams *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation SaveFileDialogParams
+ (instancetype)makeWithSourceFilePath:(NSString *)sourceFilePath
    data:(nullable FlutterStandardTypedData *)data
    destinationFileName:(NSString *)destinationFileName {
  SaveFileDialogParams* pigeonResult = [[SaveFileDialogParams alloc] init];
  pigeonResult.sourceFilePath = sourceFilePath;
  pigeonResult.data = data;
  pigeonResult.destinationFileName = destinationFileName;
  return pigeonResult;
}
+ (SaveFileDialogParams *)fromMap:(NSDictionary *)dict {
  SaveFileDialogParams *pigeonResult = [[SaveFileDialogParams alloc] init];
  pigeonResult.sourceFilePath = GetNullableObject(dict, @"sourceFilePath");
  NSAssert(pigeonResult.sourceFilePath != nil, @"");
  pigeonResult.data = GetNullableObject(dict, @"data");
  pigeonResult.destinationFileName = GetNullableObject(dict, @"destinationFileName");
  NSAssert(pigeonResult.destinationFileName != nil, @"");
  return pigeonResult;
}
+ (nullable SaveFileDialogParams *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SaveFileDialogParams fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"sourceFilePath" : (self.sourceFilePath ?: [NSNull null]),
    @"data" : (self.data ?: [NSNull null]),
    @"destinationFileName" : (self.destinationFileName ?: [NSNull null]),
  };
}
@end

@interface FileSaverApiCodecReader : FlutterStandardReader
@end
@implementation FileSaverApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [SaveFileDialogParams fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FileSaverApiCodecWriter : FlutterStandardWriter
@end
@implementation FileSaverApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[SaveFileDialogParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FileSaverApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FileSaverApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FileSaverApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FileSaverApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FileSaverApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FileSaverApiCodecReaderWriter *readerWriter = [[FileSaverApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FileSaverApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FileSaverApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FileSaverApi.saveFile"
        binaryMessenger:binaryMessenger
        codec:FileSaverApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveFileFilePath:destinationFileName:completion:)], @"FileSaverApi api (%@) doesn't respond to @selector(saveFileFilePath:destinationFileName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_filePath = GetNullableObjectAtIndex(args, 0);
        NSString *arg_destinationFileName = GetNullableObjectAtIndex(args, 1);
        [api saveFileFilePath:arg_filePath destinationFileName:arg_destinationFileName completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FileSaverApi.requestWriteExternalStoragePermission"
        binaryMessenger:binaryMessenger
        codec:FileSaverApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestWriteExternalStoragePermissionWithCompletion:)], @"FileSaverApi api (%@) doesn't respond to @selector(requestWriteExternalStoragePermissionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestWriteExternalStoragePermissionWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FileSaverApi.saveFileWithDialog"
        binaryMessenger:binaryMessenger
        codec:FileSaverApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveFileWithDialogParams:completion:)], @"FileSaverApi api (%@) doesn't respond to @selector(saveFileWithDialogParams:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SaveFileDialogParams *arg_params = GetNullableObjectAtIndex(args, 0);
        [api saveFileWithDialogParams:arg_params completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
